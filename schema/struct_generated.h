// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct fNested;
struct fNestedBuilder;

struct flatData;
struct flatDataBuilder;

struct fNested FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef fNestedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TKUUZXPP = 4,
    VT_RAXMLTSA = 6,
    VT_BFABWIYJ = 8,
    VT_ZLVLPASS = 10,
    VT_ZWDYGJZG = 12,
    VT_HLIRXQVQ = 14
  };
  int32_t tkuuzxpp() const {
    return GetField<int32_t>(VT_TKUUZXPP, 0);
  }
  int32_t raxmltsa() const {
    return GetField<int32_t>(VT_RAXMLTSA, 0);
  }
  float bfabwiyj() const {
    return GetField<float>(VT_BFABWIYJ, 0.0f);
  }
  float zlvlpass() const {
    return GetField<float>(VT_ZLVLPASS, 0.0f);
  }
  const ::flatbuffers::String *zwdygjzg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZWDYGJZG);
  }
  const ::flatbuffers::String *hlirxqvq() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HLIRXQVQ);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TKUUZXPP, 4) &&
           VerifyField<int32_t>(verifier, VT_RAXMLTSA, 4) &&
           VerifyField<float>(verifier, VT_BFABWIYJ, 4) &&
           VerifyField<float>(verifier, VT_ZLVLPASS, 4) &&
           VerifyOffset(verifier, VT_ZWDYGJZG) &&
           verifier.VerifyString(zwdygjzg()) &&
           VerifyOffset(verifier, VT_HLIRXQVQ) &&
           verifier.VerifyString(hlirxqvq()) &&
           verifier.EndTable();
  }
};

struct fNestedBuilder {
  typedef fNested Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_tkuuzxpp(int32_t tkuuzxpp) {
    fbb_.AddElement<int32_t>(fNested::VT_TKUUZXPP, tkuuzxpp, 0);
  }
  void add_raxmltsa(int32_t raxmltsa) {
    fbb_.AddElement<int32_t>(fNested::VT_RAXMLTSA, raxmltsa, 0);
  }
  void add_bfabwiyj(float bfabwiyj) {
    fbb_.AddElement<float>(fNested::VT_BFABWIYJ, bfabwiyj, 0.0f);
  }
  void add_zlvlpass(float zlvlpass) {
    fbb_.AddElement<float>(fNested::VT_ZLVLPASS, zlvlpass, 0.0f);
  }
  void add_zwdygjzg(::flatbuffers::Offset<::flatbuffers::String> zwdygjzg) {
    fbb_.AddOffset(fNested::VT_ZWDYGJZG, zwdygjzg);
  }
  void add_hlirxqvq(::flatbuffers::Offset<::flatbuffers::String> hlirxqvq) {
    fbb_.AddOffset(fNested::VT_HLIRXQVQ, hlirxqvq);
  }
  explicit fNestedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<fNested> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<fNested>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<fNested> CreatefNested(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t tkuuzxpp = 0,
    int32_t raxmltsa = 0,
    float bfabwiyj = 0.0f,
    float zlvlpass = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> zwdygjzg = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hlirxqvq = 0) {
  fNestedBuilder builder_(_fbb);
  builder_.add_hlirxqvq(hlirxqvq);
  builder_.add_zwdygjzg(zwdygjzg);
  builder_.add_zlvlpass(zlvlpass);
  builder_.add_bfabwiyj(bfabwiyj);
  builder_.add_raxmltsa(raxmltsa);
  builder_.add_tkuuzxpp(tkuuzxpp);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<fNested> CreatefNestedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t tkuuzxpp = 0,
    int32_t raxmltsa = 0,
    float bfabwiyj = 0.0f,
    float zlvlpass = 0.0f,
    const char *zwdygjzg = nullptr,
    const char *hlirxqvq = nullptr) {
  auto zwdygjzg__ = zwdygjzg ? _fbb.CreateString(zwdygjzg) : 0;
  auto hlirxqvq__ = hlirxqvq ? _fbb.CreateString(hlirxqvq) : 0;
  return CreatefNested(
      _fbb,
      tkuuzxpp,
      raxmltsa,
      bfabwiyj,
      zlvlpass,
      zwdygjzg__,
      hlirxqvq__);
}

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WFXTQNOC = 4,
    VT_XZEPBAYF = 6,
    VT_WLLLDAVF = 8,
    VT_TODNLESM = 10,
    VT_AHPOTWHV = 12,
    VT_JNXQCWXF = 14,
    VT_JMIHZBSN = 16
  };
  int32_t wfxtqnoc() const {
    return GetField<int32_t>(VT_WFXTQNOC, 0);
  }
  int32_t xzepbayf() const {
    return GetField<int32_t>(VT_XZEPBAYF, 0);
  }
  float wllldavf() const {
    return GetField<float>(VT_WLLLDAVF, 0.0f);
  }
  float todnlesm() const {
    return GetField<float>(VT_TODNLESM, 0.0f);
  }
  const ::flatbuffers::String *ahpotwhv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AHPOTWHV);
  }
  const ::flatbuffers::String *jnxqcwxf() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JNXQCWXF);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fNested>> *jmihzbsn() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fNested>> *>(VT_JMIHZBSN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WFXTQNOC, 4) &&
           VerifyField<int32_t>(verifier, VT_XZEPBAYF, 4) &&
           VerifyField<float>(verifier, VT_WLLLDAVF, 4) &&
           VerifyField<float>(verifier, VT_TODNLESM, 4) &&
           VerifyOffset(verifier, VT_AHPOTWHV) &&
           verifier.VerifyString(ahpotwhv()) &&
           VerifyOffset(verifier, VT_JNXQCWXF) &&
           verifier.VerifyString(jnxqcwxf()) &&
           VerifyOffset(verifier, VT_JMIHZBSN) &&
           verifier.VerifyVector(jmihzbsn()) &&
           verifier.VerifyVectorOfTables(jmihzbsn()) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_wfxtqnoc(int32_t wfxtqnoc) {
    fbb_.AddElement<int32_t>(flatData::VT_WFXTQNOC, wfxtqnoc, 0);
  }
  void add_xzepbayf(int32_t xzepbayf) {
    fbb_.AddElement<int32_t>(flatData::VT_XZEPBAYF, xzepbayf, 0);
  }
  void add_wllldavf(float wllldavf) {
    fbb_.AddElement<float>(flatData::VT_WLLLDAVF, wllldavf, 0.0f);
  }
  void add_todnlesm(float todnlesm) {
    fbb_.AddElement<float>(flatData::VT_TODNLESM, todnlesm, 0.0f);
  }
  void add_ahpotwhv(::flatbuffers::Offset<::flatbuffers::String> ahpotwhv) {
    fbb_.AddOffset(flatData::VT_AHPOTWHV, ahpotwhv);
  }
  void add_jnxqcwxf(::flatbuffers::Offset<::flatbuffers::String> jnxqcwxf) {
    fbb_.AddOffset(flatData::VT_JNXQCWXF, jnxqcwxf);
  }
  void add_jmihzbsn(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fNested>>> jmihzbsn) {
    fbb_.AddOffset(flatData::VT_JMIHZBSN, jmihzbsn);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t wfxtqnoc = 0,
    int32_t xzepbayf = 0,
    float wllldavf = 0.0f,
    float todnlesm = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> ahpotwhv = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jnxqcwxf = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fNested>>> jmihzbsn = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_jmihzbsn(jmihzbsn);
  builder_.add_jnxqcwxf(jnxqcwxf);
  builder_.add_ahpotwhv(ahpotwhv);
  builder_.add_todnlesm(todnlesm);
  builder_.add_wllldavf(wllldavf);
  builder_.add_xzepbayf(xzepbayf);
  builder_.add_wfxtqnoc(wfxtqnoc);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<flatData> CreateflatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t wfxtqnoc = 0,
    int32_t xzepbayf = 0,
    float wllldavf = 0.0f,
    float todnlesm = 0.0f,
    const char *ahpotwhv = nullptr,
    const char *jnxqcwxf = nullptr,
    const std::vector<::flatbuffers::Offset<fNested>> *jmihzbsn = nullptr) {
  auto ahpotwhv__ = ahpotwhv ? _fbb.CreateString(ahpotwhv) : 0;
  auto jnxqcwxf__ = jnxqcwxf ? _fbb.CreateString(jnxqcwxf) : 0;
  auto jmihzbsn__ = jmihzbsn ? _fbb.CreateVector<::flatbuffers::Offset<fNested>>(*jmihzbsn) : 0;
  return CreateflatData(
      _fbb,
      wfxtqnoc,
      xzepbayf,
      wllldavf,
      todnlesm,
      ahpotwhv__,
      jnxqcwxf__,
      jmihzbsn__);
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
