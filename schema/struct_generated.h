// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct fNested;
struct fNestedBuilder;

struct flatData;
struct flatDataBuilder;

struct fNested FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef fNestedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ETIIZWWN = 4,
    VT_CBCFSKIH = 6,
    VT_LDEUCJGA = 8,
    VT_CGEKYEBX = 10,
    VT_XGRDXJRT = 12,
    VT_CALIZKSB = 14
  };
  int32_t etiizwwn() const {
    return GetField<int32_t>(VT_ETIIZWWN, 0);
  }
  int32_t cbcfskih() const {
    return GetField<int32_t>(VT_CBCFSKIH, 0);
  }
  float ldeucjga() const {
    return GetField<float>(VT_LDEUCJGA, 0.0f);
  }
  float cgekyebx() const {
    return GetField<float>(VT_CGEKYEBX, 0.0f);
  }
  const ::flatbuffers::String *xgrdxjrt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_XGRDXJRT);
  }
  const ::flatbuffers::String *calizksb() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALIZKSB);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ETIIZWWN, 4) &&
           VerifyField<int32_t>(verifier, VT_CBCFSKIH, 4) &&
           VerifyField<float>(verifier, VT_LDEUCJGA, 4) &&
           VerifyField<float>(verifier, VT_CGEKYEBX, 4) &&
           VerifyOffset(verifier, VT_XGRDXJRT) &&
           verifier.VerifyString(xgrdxjrt()) &&
           VerifyOffset(verifier, VT_CALIZKSB) &&
           verifier.VerifyString(calizksb()) &&
           verifier.EndTable();
  }
};

struct fNestedBuilder {
  typedef fNested Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_etiizwwn(int32_t etiizwwn) {
    fbb_.AddElement<int32_t>(fNested::VT_ETIIZWWN, etiizwwn, 0);
  }
  void add_cbcfskih(int32_t cbcfskih) {
    fbb_.AddElement<int32_t>(fNested::VT_CBCFSKIH, cbcfskih, 0);
  }
  void add_ldeucjga(float ldeucjga) {
    fbb_.AddElement<float>(fNested::VT_LDEUCJGA, ldeucjga, 0.0f);
  }
  void add_cgekyebx(float cgekyebx) {
    fbb_.AddElement<float>(fNested::VT_CGEKYEBX, cgekyebx, 0.0f);
  }
  void add_xgrdxjrt(::flatbuffers::Offset<::flatbuffers::String> xgrdxjrt) {
    fbb_.AddOffset(fNested::VT_XGRDXJRT, xgrdxjrt);
  }
  void add_calizksb(::flatbuffers::Offset<::flatbuffers::String> calizksb) {
    fbb_.AddOffset(fNested::VT_CALIZKSB, calizksb);
  }
  explicit fNestedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<fNested> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<fNested>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<fNested> CreatefNested(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t etiizwwn = 0,
    int32_t cbcfskih = 0,
    float ldeucjga = 0.0f,
    float cgekyebx = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> xgrdxjrt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> calizksb = 0) {
  fNestedBuilder builder_(_fbb);
  builder_.add_calizksb(calizksb);
  builder_.add_xgrdxjrt(xgrdxjrt);
  builder_.add_cgekyebx(cgekyebx);
  builder_.add_ldeucjga(ldeucjga);
  builder_.add_cbcfskih(cbcfskih);
  builder_.add_etiizwwn(etiizwwn);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<fNested> CreatefNestedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t etiizwwn = 0,
    int32_t cbcfskih = 0,
    float ldeucjga = 0.0f,
    float cgekyebx = 0.0f,
    const char *xgrdxjrt = nullptr,
    const char *calizksb = nullptr) {
  auto xgrdxjrt__ = xgrdxjrt ? _fbb.CreateString(xgrdxjrt) : 0;
  auto calizksb__ = calizksb ? _fbb.CreateString(calizksb) : 0;
  return CreatefNested(
      _fbb,
      etiizwwn,
      cbcfskih,
      ldeucjga,
      cgekyebx,
      xgrdxjrt__,
      calizksb__);
}

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LMONTIQN = 4,
    VT_GTTSAKBP = 6,
    VT_SGRUERSI = 8,
    VT_CBJIWMFV = 10,
    VT_TOIYWWTB = 12,
    VT_OJKINVVF = 14,
    VT_MJOGVDTJ = 16
  };
  int32_t lmontiqn() const {
    return GetField<int32_t>(VT_LMONTIQN, 0);
  }
  int32_t gttsakbp() const {
    return GetField<int32_t>(VT_GTTSAKBP, 0);
  }
  float sgruersi() const {
    return GetField<float>(VT_SGRUERSI, 0.0f);
  }
  float cbjiwmfv() const {
    return GetField<float>(VT_CBJIWMFV, 0.0f);
  }
  const ::flatbuffers::String *toiywwtb() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOIYWWTB);
  }
  const ::flatbuffers::String *ojkinvvf() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OJKINVVF);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fNested>> *mjogvdtj() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fNested>> *>(VT_MJOGVDTJ);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_LMONTIQN, 4) &&
           VerifyField<int32_t>(verifier, VT_GTTSAKBP, 4) &&
           VerifyField<float>(verifier, VT_SGRUERSI, 4) &&
           VerifyField<float>(verifier, VT_CBJIWMFV, 4) &&
           VerifyOffset(verifier, VT_TOIYWWTB) &&
           verifier.VerifyString(toiywwtb()) &&
           VerifyOffset(verifier, VT_OJKINVVF) &&
           verifier.VerifyString(ojkinvvf()) &&
           VerifyOffset(verifier, VT_MJOGVDTJ) &&
           verifier.VerifyVector(mjogvdtj()) &&
           verifier.VerifyVectorOfTables(mjogvdtj()) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lmontiqn(int32_t lmontiqn) {
    fbb_.AddElement<int32_t>(flatData::VT_LMONTIQN, lmontiqn, 0);
  }
  void add_gttsakbp(int32_t gttsakbp) {
    fbb_.AddElement<int32_t>(flatData::VT_GTTSAKBP, gttsakbp, 0);
  }
  void add_sgruersi(float sgruersi) {
    fbb_.AddElement<float>(flatData::VT_SGRUERSI, sgruersi, 0.0f);
  }
  void add_cbjiwmfv(float cbjiwmfv) {
    fbb_.AddElement<float>(flatData::VT_CBJIWMFV, cbjiwmfv, 0.0f);
  }
  void add_toiywwtb(::flatbuffers::Offset<::flatbuffers::String> toiywwtb) {
    fbb_.AddOffset(flatData::VT_TOIYWWTB, toiywwtb);
  }
  void add_ojkinvvf(::flatbuffers::Offset<::flatbuffers::String> ojkinvvf) {
    fbb_.AddOffset(flatData::VT_OJKINVVF, ojkinvvf);
  }
  void add_mjogvdtj(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fNested>>> mjogvdtj) {
    fbb_.AddOffset(flatData::VT_MJOGVDTJ, mjogvdtj);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t lmontiqn = 0,
    int32_t gttsakbp = 0,
    float sgruersi = 0.0f,
    float cbjiwmfv = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> toiywwtb = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ojkinvvf = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fNested>>> mjogvdtj = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_mjogvdtj(mjogvdtj);
  builder_.add_ojkinvvf(ojkinvvf);
  builder_.add_toiywwtb(toiywwtb);
  builder_.add_cbjiwmfv(cbjiwmfv);
  builder_.add_sgruersi(sgruersi);
  builder_.add_gttsakbp(gttsakbp);
  builder_.add_lmontiqn(lmontiqn);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<flatData> CreateflatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t lmontiqn = 0,
    int32_t gttsakbp = 0,
    float sgruersi = 0.0f,
    float cbjiwmfv = 0.0f,
    const char *toiywwtb = nullptr,
    const char *ojkinvvf = nullptr,
    const std::vector<::flatbuffers::Offset<fNested>> *mjogvdtj = nullptr) {
  auto toiywwtb__ = toiywwtb ? _fbb.CreateString(toiywwtb) : 0;
  auto ojkinvvf__ = ojkinvvf ? _fbb.CreateString(ojkinvvf) : 0;
  auto mjogvdtj__ = mjogvdtj ? _fbb.CreateVector<::flatbuffers::Offset<fNested>>(*mjogvdtj) : 0;
  return CreateflatData(
      _fbb,
      lmontiqn,
      gttsakbp,
      sgruersi,
      cbjiwmfv,
      toiywwtb__,
      ojkinvvf__,
      mjogvdtj__);
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
