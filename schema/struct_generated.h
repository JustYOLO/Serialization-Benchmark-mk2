// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRUCT_H_
#define FLATBUFFERS_GENERATED_STRUCT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct flatData;
struct flatDataBuilder;

struct flatData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef flatDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ZVTECOOQ = 4,
    VT_YHAVZZUS = 6,
    VT_BDARCOPV = 8,
    VT_ZYXHBTAD = 10,
    VT_BIFSQZPY = 12,
    VT_WPEBLHBA = 14,
    VT_EQOHXBBJ = 16,
    VT_RGMCKFXB = 18
  };
  const ::flatbuffers::String *zvtecooq() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZVTECOOQ);
  }
  const ::flatbuffers::String *yhavzzus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_YHAVZZUS);
  }
  const ::flatbuffers::String *bdarcopv() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BDARCOPV);
  }
  const ::flatbuffers::String *zyxhbtad() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZYXHBTAD);
  }
  const ::flatbuffers::String *bifsqzpy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BIFSQZPY);
  }
  const ::flatbuffers::String *wpeblhba() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WPEBLHBA);
  }
  const ::flatbuffers::String *eqohxbbj() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EQOHXBBJ);
  }
  const ::flatbuffers::String *rgmckfxb() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RGMCKFXB);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ZVTECOOQ) &&
           verifier.VerifyString(zvtecooq()) &&
           VerifyOffset(verifier, VT_YHAVZZUS) &&
           verifier.VerifyString(yhavzzus()) &&
           VerifyOffset(verifier, VT_BDARCOPV) &&
           verifier.VerifyString(bdarcopv()) &&
           VerifyOffset(verifier, VT_ZYXHBTAD) &&
           verifier.VerifyString(zyxhbtad()) &&
           VerifyOffset(verifier, VT_BIFSQZPY) &&
           verifier.VerifyString(bifsqzpy()) &&
           VerifyOffset(verifier, VT_WPEBLHBA) &&
           verifier.VerifyString(wpeblhba()) &&
           VerifyOffset(verifier, VT_EQOHXBBJ) &&
           verifier.VerifyString(eqohxbbj()) &&
           VerifyOffset(verifier, VT_RGMCKFXB) &&
           verifier.VerifyString(rgmckfxb()) &&
           verifier.EndTable();
  }
};

struct flatDataBuilder {
  typedef flatData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_zvtecooq(::flatbuffers::Offset<::flatbuffers::String> zvtecooq) {
    fbb_.AddOffset(flatData::VT_ZVTECOOQ, zvtecooq);
  }
  void add_yhavzzus(::flatbuffers::Offset<::flatbuffers::String> yhavzzus) {
    fbb_.AddOffset(flatData::VT_YHAVZZUS, yhavzzus);
  }
  void add_bdarcopv(::flatbuffers::Offset<::flatbuffers::String> bdarcopv) {
    fbb_.AddOffset(flatData::VT_BDARCOPV, bdarcopv);
  }
  void add_zyxhbtad(::flatbuffers::Offset<::flatbuffers::String> zyxhbtad) {
    fbb_.AddOffset(flatData::VT_ZYXHBTAD, zyxhbtad);
  }
  void add_bifsqzpy(::flatbuffers::Offset<::flatbuffers::String> bifsqzpy) {
    fbb_.AddOffset(flatData::VT_BIFSQZPY, bifsqzpy);
  }
  void add_wpeblhba(::flatbuffers::Offset<::flatbuffers::String> wpeblhba) {
    fbb_.AddOffset(flatData::VT_WPEBLHBA, wpeblhba);
  }
  void add_eqohxbbj(::flatbuffers::Offset<::flatbuffers::String> eqohxbbj) {
    fbb_.AddOffset(flatData::VT_EQOHXBBJ, eqohxbbj);
  }
  void add_rgmckfxb(::flatbuffers::Offset<::flatbuffers::String> rgmckfxb) {
    fbb_.AddOffset(flatData::VT_RGMCKFXB, rgmckfxb);
  }
  explicit flatDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<flatData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<flatData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<flatData> CreateflatData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> zvtecooq = 0,
    ::flatbuffers::Offset<::flatbuffers::String> yhavzzus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bdarcopv = 0,
    ::flatbuffers::Offset<::flatbuffers::String> zyxhbtad = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bifsqzpy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wpeblhba = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eqohxbbj = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rgmckfxb = 0) {
  flatDataBuilder builder_(_fbb);
  builder_.add_rgmckfxb(rgmckfxb);
  builder_.add_eqohxbbj(eqohxbbj);
  builder_.add_wpeblhba(wpeblhba);
  builder_.add_bifsqzpy(bifsqzpy);
  builder_.add_zyxhbtad(zyxhbtad);
  builder_.add_bdarcopv(bdarcopv);
  builder_.add_yhavzzus(yhavzzus);
  builder_.add_zvtecooq(zvtecooq);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<flatData> CreateflatDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *zvtecooq = nullptr,
    const char *yhavzzus = nullptr,
    const char *bdarcopv = nullptr,
    const char *zyxhbtad = nullptr,
    const char *bifsqzpy = nullptr,
    const char *wpeblhba = nullptr,
    const char *eqohxbbj = nullptr,
    const char *rgmckfxb = nullptr) {
  auto zvtecooq__ = zvtecooq ? _fbb.CreateString(zvtecooq) : 0;
  auto yhavzzus__ = yhavzzus ? _fbb.CreateString(yhavzzus) : 0;
  auto bdarcopv__ = bdarcopv ? _fbb.CreateString(bdarcopv) : 0;
  auto zyxhbtad__ = zyxhbtad ? _fbb.CreateString(zyxhbtad) : 0;
  auto bifsqzpy__ = bifsqzpy ? _fbb.CreateString(bifsqzpy) : 0;
  auto wpeblhba__ = wpeblhba ? _fbb.CreateString(wpeblhba) : 0;
  auto eqohxbbj__ = eqohxbbj ? _fbb.CreateString(eqohxbbj) : 0;
  auto rgmckfxb__ = rgmckfxb ? _fbb.CreateString(rgmckfxb) : 0;
  return CreateflatData(
      _fbb,
      zvtecooq__,
      yhavzzus__,
      bdarcopv__,
      zyxhbtad__,
      bifsqzpy__,
      wpeblhba__,
      eqohxbbj__,
      rgmckfxb__);
}

inline const flatData *GetflatData(const void *buf) {
  return ::flatbuffers::GetRoot<flatData>(buf);
}

inline const flatData *GetSizePrefixedflatData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<flatData>(buf);
}

inline bool VerifyflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatData>(nullptr);
}

inline bool VerifySizePrefixedflatDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flatData>(nullptr);
}

inline void FinishflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedflatDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<flatData> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_STRUCT_H_
