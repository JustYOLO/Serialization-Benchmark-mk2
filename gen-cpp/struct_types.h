/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef struct_TYPES_H
#define struct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class TStruct;


class TStruct : public virtual ::apache::thrift::TBase {
 public:

  TStruct(const TStruct&) noexcept;
  TStruct& operator=(const TStruct&) noexcept;
  TStruct() noexcept {
  }

  virtual ~TStruct() noexcept;

  bool operator == (const TStruct & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TStruct &a, TStruct &b);

std::ostream& operator<<(std::ostream& out, const TStruct& obj);



#endif
