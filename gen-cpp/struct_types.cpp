/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TStruct::~TStruct() noexcept {
}


void TStruct::__set_zvtecooq(const std::string& val) {
  this->zvtecooq = val;
}

void TStruct::__set_yhavzzus(const std::string& val) {
  this->yhavzzus = val;
}

void TStruct::__set_bdarcopv(const std::string& val) {
  this->bdarcopv = val;
}

void TStruct::__set_zyxhbtad(const std::string& val) {
  this->zyxhbtad = val;
}

void TStruct::__set_bifsqzpy(const std::string& val) {
  this->bifsqzpy = val;
}

void TStruct::__set_wpeblhba(const std::string& val) {
  this->wpeblhba = val;
}

void TStruct::__set_eqohxbbj(const std::string& val) {
  this->eqohxbbj = val;
}

void TStruct::__set_rgmckfxb(const std::string& val) {
  this->rgmckfxb = val;
}
std::ostream& operator<<(std::ostream& out, const TStruct& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zvtecooq);
          this->__isset.zvtecooq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->yhavzzus);
          this->__isset.yhavzzus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bdarcopv);
          this->__isset.bdarcopv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->zyxhbtad);
          this->__isset.zyxhbtad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bifsqzpy);
          this->__isset.bifsqzpy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->wpeblhba);
          this->__isset.wpeblhba = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eqohxbbj);
          this->__isset.eqohxbbj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rgmckfxb);
          this->__isset.rgmckfxb = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStruct");

  xfer += oprot->writeFieldBegin("zvtecooq", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->zvtecooq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("yhavzzus", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->yhavzzus);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bdarcopv", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->bdarcopv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zyxhbtad", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->zyxhbtad);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bifsqzpy", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->bifsqzpy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wpeblhba", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->wpeblhba);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eqohxbbj", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->eqohxbbj);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rgmckfxb", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->rgmckfxb);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStruct &a, TStruct &b) {
  using ::std::swap;
  swap(a.zvtecooq, b.zvtecooq);
  swap(a.yhavzzus, b.yhavzzus);
  swap(a.bdarcopv, b.bdarcopv);
  swap(a.zyxhbtad, b.zyxhbtad);
  swap(a.bifsqzpy, b.bifsqzpy);
  swap(a.wpeblhba, b.wpeblhba);
  swap(a.eqohxbbj, b.eqohxbbj);
  swap(a.rgmckfxb, b.rgmckfxb);
  swap(a.__isset, b.__isset);
}

TStruct::TStruct(const TStruct& other0) {
  zvtecooq = other0.zvtecooq;
  yhavzzus = other0.yhavzzus;
  bdarcopv = other0.bdarcopv;
  zyxhbtad = other0.zyxhbtad;
  bifsqzpy = other0.bifsqzpy;
  wpeblhba = other0.wpeblhba;
  eqohxbbj = other0.eqohxbbj;
  rgmckfxb = other0.rgmckfxb;
  __isset = other0.__isset;
}
TStruct& TStruct::operator=(const TStruct& other1) {
  zvtecooq = other1.zvtecooq;
  yhavzzus = other1.yhavzzus;
  bdarcopv = other1.bdarcopv;
  zyxhbtad = other1.zyxhbtad;
  bifsqzpy = other1.bifsqzpy;
  wpeblhba = other1.wpeblhba;
  eqohxbbj = other1.eqohxbbj;
  rgmckfxb = other1.rgmckfxb;
  __isset = other1.__isset;
  return *this;
}
void TStruct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStruct(";
  out << "zvtecooq=" << to_string(zvtecooq);
  out << ", " << "yhavzzus=" << to_string(yhavzzus);
  out << ", " << "bdarcopv=" << to_string(bdarcopv);
  out << ", " << "zyxhbtad=" << to_string(zyxhbtad);
  out << ", " << "bifsqzpy=" << to_string(bifsqzpy);
  out << ", " << "wpeblhba=" << to_string(wpeblhba);
  out << ", " << "eqohxbbj=" << to_string(eqohxbbj);
  out << ", " << "rgmckfxb=" << to_string(rgmckfxb);
  out << ")";
}


